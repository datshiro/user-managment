// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// App is an autogenerated mock type for the App type
type App struct {
	mock.Mock
}

type App_Expecter struct {
	mock *mock.Mock
}

func (_m *App) EXPECT() *App_Expecter {
	return &App_Expecter{mock: &_m.Mock}
}

// Start provides a mock function with given fields:
func (_m *App) Start() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Start")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// App_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type App_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
func (_e *App_Expecter) Start() *App_Start_Call {
	return &App_Start_Call{Call: _e.mock.On("Start")}
}

func (_c *App_Start_Call) Run(run func()) *App_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *App_Start_Call) Return(_a0 error) *App_Start_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *App_Start_Call) RunAndReturn(run func() error) *App_Start_Call {
	_c.Call.Return(run)
	return _c
}

// Stop provides a mock function with given fields: ctx
func (_m *App) Stop(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Stop")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// App_Stop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stop'
type App_Stop_Call struct {
	*mock.Call
}

// Stop is a helper method to define mock.On call
//   - ctx context.Context
func (_e *App_Expecter) Stop(ctx interface{}) *App_Stop_Call {
	return &App_Stop_Call{Call: _e.mock.On("Stop", ctx)}
}

func (_c *App_Stop_Call) Run(run func(ctx context.Context)) *App_Stop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *App_Stop_Call) Return(_a0 error) *App_Stop_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *App_Stop_Call) RunAndReturn(run func(context.Context) error) *App_Stop_Call {
	_c.Call.Return(run)
	return _c
}

// NewApp creates a new instance of App. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewApp(t interface {
	mock.TestingT
	Cleanup(func())
}) *App {
	mock := &App{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
